module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  plugins: [
    '@typescript-eslint/eslint-plugin',
    'perfectionist',
  ],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  root: true,
  env: {
    node: true,
    jest: true,
    browser: true,
  },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/array-type': ['error', {
      default: 'array-simple'
    }],
    '@typescript-eslint/class-literal-property-style': ['error', 'fields'],
    '@typescript-eslint/consistent-generic-constructors': ['error', 'constructor'],
    '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
    '@typescript-eslint/consistent-type-imports': 'error',
    '@typescript-eslint/no-base-to-string': 'error',
    '@typescript-eslint/no-confusing-non-null-assertion': 'error',
    '@typescript-eslint/no-confusing-void-expression': 'error',
    '@typescript-eslint/no-duplicate-enum-values': 'error',
    '@typescript-eslint/no-duplicate-type-constituents': 'error',
    '@typescript-eslint/no-dynamic-delete': 'error',
    '@typescript-eslint/no-import-type-side-effects': 'error',
    '@typescript-eslint/no-invalid-void-type': 'error',
    '@typescript-eslint/no-meaningless-void-operator': 'error',
    '@typescript-eslint/no-mixed-enums': 'error',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
    '@typescript-eslint/no-require-imports': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-condition': 'error',
    '@typescript-eslint/no-unnecessary-qualifier': 'error',
    '@typescript-eslint/no-unnecessary-type-arguments': 'error',
    '@typescript-eslint/no-unsafe-declaration-merging': 'error',
    '@typescript-eslint/no-unsafe-enum-comparison': 'error',
    '@typescript-eslint/no-useless-empty-export': 'error',
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/non-nullable-type-assertion-style': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-includes': 'error',
    '@typescript-eslint/prefer-literal-enum-member': ['error', {
      allowBitwiseExpressions: true,
    }],
    '@typescript-eslint/prefer-nullish-coalescing': 'error',
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-reduce-type-parameter': 'error',
    '@typescript-eslint/prefer-regexp-exec': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/prefer-ts-expect-error': 'error',
    '@typescript-eslint/promise-function-async': 'error',
    '@typescript-eslint/require-array-sort-compare': 'error',
    '@typescript-eslint/strict-boolean-expressions': 'error',
    '@typescript-eslint/switch-exhaustiveness-check': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    'default-param-last': 'off',
    '@typescript-eslint/default-param-last': 'error',
    'dot-notation': 'off',
    '@typescript-eslint/dot-notation': 'error',
    'no-dupe-class-members': 'off',
    '@typescript-eslint/no-dupe-class-members': 'error',
    'no-implied-eval': 'off',
    '@typescript-eslint/no-implied-eval': 'error',
    'no-invalid-this': 'off',
    '@typescript-eslint/no-invalid-this': 'error',
    'no-loop-func': 'off',
    '@typescript-eslint/no-loop-func': 'error',
    'no-redeclare': 'off',
    '@typescript-eslint/no-redeclare': 'off',
    'no-shadow': 'off', // Allow variable shadowing
    'no-throw-literal': 'off',
    '@typescript-eslint/no-throw-literal': 'error',
    'no-unused-expressions': 'off', // Allow due to potential issues with short-circuiting and return value discards
    'no-use-before-define': 'off', // Allow due to potential issues with cyclic type dependencies
    'no-useless-constructor': 'off',
    '@typescript-eslint/no-useless-constructor': 'error',
    'require-await': 'off', // Allow async functions without await for easier Promise handling
    'no-return-await': 'off',
    '@typescript-eslint/return-await': 'error',
    'array-callback-return': ['error', {
      checkForEach: true,
    }],
    'no-extra-boolean-cast': 'off',
    'no-constant-binary-expression': 'error',
    'no-constructor-return': 'error',
    'no-duplicate-imports': 'error',
    'no-new-native-nonconstructor': 'error',
    'no-promise-executor-return': 'error',
    'no-self-compare': 'error',
    'no-template-curly-in-string': 'error',
    'no-unreachable-loop': 'error',
    'require-atomic-updates': 'error',
    'camelcase': 'error',
    'curly': ['error', 'all'],
    'default-case': ['error', {
      commentPattern: '^otherwise: do nothing',
    }],
    'default-case-last': 'error',
    'eqeqeq': ['error', 'always', {
      'null': 'ignore',
    }],
    'func-names': ['error', 'as-needed'],
    'guard-for-in': 'error',
    'logical-assignment-operators': 'error',
    'max-classes-per-file': ['error', {
      ignoreExpressions: true,
      max: 1,
    }],
    'multiline-comment-style': ['error', 'starred-block'],
    'no-caller': 'error',
    'no-confusing-arrow': 'error',
    'no-div-regex': 'error',
    'no-else-return': 'error',
    'no-eval': 'error',
    'no-extend-native': ['error', {
      exceptions: ['Array'],
    }],
    'no-extra-bind': 'error',
    'no-extra-label': 'error',
    'no-floating-decimal': 'error',
    'no-implicit-coercion': 'error',
    'no-label-var': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    'no-nested-ternary': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-object': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': 'error',
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-sequences': 'error',
    'no-undefined': 'error',
    'no-underscore-dangle': ['error', {
      enforceInMethodNames: true,
      enforceInClassFields: true,
      allowInArrayDestructuring: true,
      allowInObjectDestructuring: false,
      allowFunctionParams: true,
    }],
    'no-unneeded-ternary': ['error', {
      defaultAssignment: false,
    }],
    'no-useless-call': 'error',
    'no-useless-concat': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'prefer-exponentiation-operator': 'error',
    'prefer-object-has-own': 'error',
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': ['error', {
      allowEmptyReject: true, // We want Promise<void> to be able to reject without reasons
    }],
    'prefer-regex-literals': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'radix': 'error',
    'spaced-comment': 'error',
    'yoda': ['error', 'never', {
      onlyEquality: true,
    }],
    'perfectionist/sort-classes': ['error', {
      type: 'natural',
      order: 'asc',
      groups: [
        'static-property',
        'property',
        'private-property',
        'constructor',
        'static-method',
        'method',
        'private-method',
        'unknown',
      ],
    }],
    'perfectionist/sort-exports': ['error', {
      type: 'natural',
      order: 'asc',
    }],
    'perfectionist/sort-imports': ['error', {
      type: 'natural',
      order: 'asc',
      groups: [
        ['side-effect', 'object'],
        ['builtin', 'builtin-type'],
        ['external', 'external-type'],
        ['internal', 'internal-type'],
        ['parent', 'parent-type', 'sibling', 'sibling-type', 'index', 'index-type', 'type', 'style', 'unknown'],
      ],
    }],
    'perfectionist/sort-named-exports': ['error', {
      type: 'natural',
      order: 'asc',
    }],
    'perfectionist/sort-named-imports': ['error', {
      type: 'natural',
      order: 'asc',
    }],
  },
}
